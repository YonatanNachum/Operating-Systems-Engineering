=== This template file contains questions you need to answer.
=== Fill your answers on appropriate blank lines only.
=== Don't start any line with three equal signs "===".
=== Don't edit any lines starting from three equal signs.
=== Use C notation to write numbers: 42 for decimal, 0x2a for hexadecimal.
=== We may check most of the answers automatically, so "forty two" or
=== "26+16" won't work for this example. Spaces are mostly ignored, so
=== "  42  " is OK (without quotes of course). 
=== When asked to specify address & instruction, do it in the form of
=== gdb output "ADDRESS: INSTRUCTION", for example "0x7c26:  or  $0x1,%eax"
=== Don't make lines longer than 80 characters. You don't need to fit your
=== answer in a single line, you can start a new line at will.
=== However, when asked to fill "a table" make each table raw a single line.


=== Q What's the purpose of leaving virtual memory region
===   0xeebfe000-0xeebff000 inaccessible?
===   (free form, up to 10 words)
This is the guarding page for the stack.

=== Q Define a page table entry with the following properties:
===   frame starts at 0x1234000. It can be written by the kernel
===   without causing any errors, but has never been written yet. On
===   the other hand, application cannot write to the page, but has
===   recently successfully read from it. All bits which are not
===   responsible for above properties are set to zero.  
===   (a single memory WORD as would be output by gdb's x/1x)
0x1234025

=== Q Consider JOS kernel code:
===     mystery_t x;
===   	char* value = return_a_pointer();
===   	*value = 10;
===   	x = (mystery_t) value;
===   What type mystery_t should refer to?
===   (remove leading "====" from the correct answer line)
uintptr_t
==== physaddr_t


=== Q What information is stored in page directory when mem_init()
===   finishes? For each non-empty PD entry specify:
===    - decimal index (0-1023)
===    - hexadecimal address of virtual memory mapped by this entry
===    - name of kernel data structure which is intended to be
===      accessible through this PDE (when appropriate, in quotes)
===    - general name (free form, up to 10 words in quotes)
===    Sort the table by the index in ascending order. If several
===    consequent entries are only differ in address field, you can
===    specify ellipses ("...") instead of an "inner" entries. Please
===    align columns into readable table using spaces.
===    Format example (all the values are made up; omit the header):
===    INDEX ADDRESS DATA-STRUCTURE         NAME/DESCRIPTION
===    24    0x12345 "struct Segdesc gdt[]" "Global descriptor table"
===    ...
===    42    0x98765 "struct Segdesc gdt[]" "Global descriptor table"
===    50    0x00011 ""                     "boot loader code"
0    0x00000000    "unmapped"
1    0x00400000    "unmapped"
2    0x00800000    "unmapped"
...
956  0xef000000    "struct PageInfo*"            "pages array"
957  0xef400000    "pde_t *"                     "Current Page Table"    
958  0xef800000    "unmapped"
959  0xefc00000    "char bootstack[]"            "kernel stack"
960  0xf0000000    "page"                        "page of first 4MB of physical memory"
...
1023 0xffc00000    "page"                        "page of last 4MB of physical memory"
=== Q We have placed the kernel and user environment in the same
===   address space. Why will user programs not be able to read or
===   write the kernel's memory? What specific mechanisms protect the
===   kernel memory?
===   (free form, up to 15 words)
kernel memory pte's are protected by permission bits(PTE_U) and CPL

=== Q Which virtual addresses are readable by the user?
===   (in the form ADDR1-ADDR2, if none, specify NONE)
0x00000000 - 0xef800000

=== Q Which virtual addresses are writable by the user?
===   (in the form ADDR1-ADDR2, if none, specify NONE)
0x00000000 - 0xeec00000

=== Q Assume a hacker can change N bits inside page table (on any
===   level, PD or PT) after it has been set up by the kernel (and
===   before full TLB flush). What is the minimal N to gain full
===   control of the system from hacker's user space process?
2

=== Q What's the maximum amount of physical memory this kernel can
===   support? (number of megabytes, without MB suffix)
256

=== Q What single constant can be changed in kernel source to make
===   this limit 2 times lower (if kernel normally supports 10MB,
===   we want to make it support only 5MB?
KERNBASE

=== Q What value should this constant be changed to?
0xf8000000

=== Q Assume the computer has the maximum amount of memory supported
===   by the (unmodified) kernel. What's the overhead of managing this
===   memory in terms of (physical) memory spent?
===   Specify only data structures which size depends on the amount of
===   physical memory and exclude the "fixed" overhead. For example,
===   if data structure size is 123K+0.01*(memory size) and maximum 
===   amount of memory is 100MB, specify 0.01*100MB = 1024KB.
===   For each such data structure specify:
===    - size in KB (without "KB suffix")
===    - name of kernel data structure (when appropriate, in quotes)
===    - general name (free form, up to 10 words in quotes)
===    Sort the table by the size in ascending order. Please
===    align columns into readable table using spaces.
===    Format example (all the values are made up; omit the header):
===    SIZE  DATA-STRUCTURE         NAME/DESCRIPTION
===    42    "struct Segdesc gdt[]" "Global descriptor table"
512    "struct PageInfo*"  "struct pageInfo for each of the 65536 pages"
4      "pde_t*"            "PDE has 1024 entries, each of size 4B"
4096   "pte_t*"            "each entry in pgdir leads to 4KB page table"

====================================================================
=== Q What challenge(s) have you chosen to implement? (specify
===   challenge numbers separated by spaces, if more than one)
1 2

=== Q If the challenge requires changing the kernel source, list the
===   files which you have changed/added during implementation.
===   (one file per line, relative to lab directory containing .git/)
entry.S
pmap.c
mmu.h
monitor.h
monitor.c

=== Q Describe your solution.
===   (free form, up to 500 words, don't need to use all 500!)
Challenge 1:
First, we checked if the processor support 4MB pages, we did it by adding
the command "cpuid" to entry.s. IF PSE is supported bit 3 in edx will be 1 and 
if so we add CR4_PSE to CR4 register which enables 4MB pages on the MMU. Writing
to CR4 flushes the TLB to make sure all entries in it are up to date.
After this, we added a global variable "pse_support" to pmap.c that checks in the 
start of mem_init if CR4_PSE in on in CR4. If it is on we use boot_kernel_map to map kernel
virtual memory to the physical memory which uses only the page table directory to map 4MB pages 
each time. We also added support in pagedir_walk and page_lookup for large pages.
Remove comment in line 136 in pmap.c to enable PSE.

Challenge 2:
We added 3 new commands: showmappings, ChangePagePerm, memoryDump.
showmappings:
Gets the start and end virtual addresses. We translate the strings to numbers and then we loop
through all the addresses in jumps of PGSIZE/PTSIZE and each time perform page walk to find the 
physical address the pte it relates to. Each timme we print the physical address and the flags.

ChangePagePerm:
We support the clear or change of PTE_U, PTE_W. We get the pte using page walk and if the entry exits
we execute, and if not we stop.
The command starts with clear or set. if clear we zero the relevant flags in the pte relates to the
virtual address.
If the command starts set, the user can provide 4 flags: U, ~U, W, ~W. the corresponds for User/Supervisor
and Write/Read only.

memoryDump:
The command gets the start and end address and a flag -v\-p the says if its virtual or physical addresses.
If the addresses are virtual we use page_lookup to get the struct pageInfo and from it get the physical
address. If tge addresses are physical we use KADDR to get the virtual address.
We print the memory in chunks of 16 bytes each time, so we loop from begin to end and advance by 0x10
each time.