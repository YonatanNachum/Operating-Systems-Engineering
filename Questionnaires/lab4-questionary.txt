=== This template file contains questions you need to answer.
=== Fill your answers on appropriate blank lines only.
=== Don't start any line with three equal signs "===".
=== Don't edit any lines starting from three equal signs.
=== Use C notation to write numbers: 42 for decimal, 0x2a for hexadecimal.
=== We may check most of the answers automatically, so "forty two" or
=== "26+16" won't work for this example. Spaces are mostly ignored, so
=== "  42  " is OK (without quotes of course). 
=== When asked to specify address & instruction, do it in the form of
=== gdb output "ADDRESS: INSTRUCTION", for example "0x7c26:  or  $0x1,%eax"
=== Don't make lines longer than 80 characters. You don't need to fit your
=== answer in a single line, you can start a new line at will.
=== However, when asked to fill "a table" make each table raw a singleline.

=== Q Compare kern/mpentry.S side by side with boot/boot.S. Bearing in
===   mind that kern/mpentry.S is compiled and linked to run above KERNBASE
===   just like everything else in the kernel, what is the purpose of macro
===   MPBOOTPHYS? Why is it necessary in kern/mpentry.S but not in
===   boot/boot.S? In other words, what could go wrong if it were
===   omitted in kern/mpentry.S?
===   (free form)
The purpose of MPBOOTPHYS is to calculate absolute addresses of its
symbols, rather than relying on the linker to fill them.
mpentry.S is loaded by the bootloader as part of the kernel, in boot_aps() we
copy this code to MPENTRY_PADDR(0x7000) and we need MPBOOTPHYS to calculate the absolute
addresses of its symbols unlike boot.S which uses the linker for this.
This way we can execute the code where we want just like boot.S.
APs start in real mode, much like how the bootloader started in boot/boot.S, so we use
MPBOOTPHYS to copie symbols to a memory location that is addressable in the 
real mode and without it we crash.

=== Q It seems that using the big kernel lock guarantees that only one
===   CPU can run the kernel code at a time. Why do we still need
===   separate kernel stacks for each CPU? Describe a scenario in
===   which using a shared kernel stack will go wrong, even with the
===   protection of the big kernel lock.
===   (free form)
When an x86 processor takes an interrupt or trap the processor pushes on the kernel stack
SS, ESP, EFLAGS, CS, EIP, and an optional error code. This happens before acquiring the lock
so if we have only one kernel stack there is a possible scenario that one processor is in kernel
mode using the kernel stack and an interrupt raised in other processor and it adds the interrupt
content to the kernel stack before checking the lock.

=== Q Whenever the kernel switches from one environment to another, it
===   must ensure the old environment's registers are saved so they
===   can be restored properly later. Where does this happen?
===   (JOS function name)
trap()

=== Q In your implementation of env_run() you should have called
===   lcr3(). Before and after the call to lcr3(), your code makes
===   references (at least it should) to the variable e, the argument
===   to env_run. Upon loading the %cr3 register, the addressing
===   context used by the MMU is instantly changed. But a virtual
===   address (namely e) has meaning relative to a given address 
===   context--the address context specifies the physical address to
===   which the virtual address maps. Why can the pointer e be
===   dereferenced both before and after the addressing switch?
===   (one sentence, free form)
Because the kernel part of the virtual memory of each environment is identical
so we can dereference e before and after loading a new pgdir. That's because e
is struct Env pointer and the envs array is allocated above KERNBASE which mean
all envs share the same env array.

=== Q In Ex. 9, what happens if the user environment runs out of
===   space on the exception stack?
===   (one setence, free form)
When we calculate the address for the UTrapframe we check using user_mem_assert
if we can access this memory and if not we panic which mean the current stack
overflows. Each time we fault in user mode, we go to the page_fault_handler in the
kernel and create a new stack for it and check if it's address is legal and go back
to user mode with this stack.

=== Q In dumpfork.c, the first time you call duppage(), the function
===   allocates a page in one environment (env A) and then maps it in
===   another (env B). At what address is the page mapped in env A, and
===   at what address is it mapped in env B?
===   (ADDR(in env A):ADDR(in env B) (example: 0xAAAAAAAA:0xBBBBBBBB)
0x800000:0x400000

====================================================================
=== Q What challenge(s) have you chosen to implement? (specify
===   challenge numbers separated by spaces, if more than one)
2

=== Q If the challenge requires changing the kernel source, list the
===   files which you have changed/added during implementation.
===   (one file per line, relative to lab directory containing .git/)
inc/env.h
inc/lib.h
inc/syscall.h
kern/env.c
kern/Makefrag
kern/sched.c
kern/syscall.c
lib/syscall.c
user/priority.c

=== Q Describe you solution.
===   (free form, up to 500 words, don't need to use all 500!)
We added to struct Env new field, env_priority which is an unsigned int, initialized to zero.
We added a new syscall to modify the env priority field for the env itself - sys_change_priority.
We changed the scheduling policy, now the next enviroment to run when sched_yeild is called will be
as follow:
We used two parameters to decide if the scheduler should switch from the current running env and the
env that is in queue:
1. priority_diff - The difference in priority between the envs.
2. run_diff - The difference in the number of runs each env did.
The algorithm checks if the difference in runs between the higher prioritized env and the other env is at least 
priority_diff, if so it will switch to the least prioritized env (might be curenv). Which means we give the higher
prioritized env priority_diff extra runs in comparison to the other env.
This solution tries to solve the starvation problem with running envs according to priority only.

We added a test: priority.c that show the different way the envs run with the different schedulers,
When we run it with the priority scheduler we can see the child env runs multiple times because hes priority
is higher.
To run the new scheduler remove the comment from SCHED_CHALLANGE in the top of sched.c.